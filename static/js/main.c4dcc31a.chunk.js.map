{"version":3,"sources":["components/CityInput.js","components/CountryInput.js","utility/utility.js","ui/CardUI.js","components/WeatherCard.js","components/WeatherToday.js","components/WeatherList.js","hooks/useFetch.js","App.js","api/config.js","index.js","ui/CardUI.module.css"],"names":["CityInput","onSearch","selectedCity","setSelectedCity","cityOptions","setCityOptions","isCityOptionsDisabled","selectedCountry","useState","open","setOpen","loading","length","useEffect","a","fetch","method","headers","body","JSON","stringify","country","response","json","results","data","Autocomplete","autoHighlight","options","value","disabled","onOpen","onClose","renderInput","params","TextField","label","placeholder","variant","InputProps","startAdornment","InputAdornment","position","endAdornment","CircularProgress","color","size","onChange","event","reason","type","CountryInput","setSelectedCountry","setIsCityOptionsDisabled","setOptions","map","titleCase","str","words","toLowerCase","split","capitalized","word","charAt","toUpperCase","substring","join","handleImageError","e","description","fallbackText","trim","replace","target","onerror","src","CardUI","props","Grid","item","component","Card","className","classes","card","xs","sm","md","children","WeatherCard","weatherData","date","moment","dt_txt","lg","CardActionArea","CardHeader","align","title","format","CardMedia","image","weather","icon","alt","onError","CardContent","Typography","main","temp","CardActions","disableSpacing","Tooltip","TransitionComponent","Zoom","arrow","disableFocusListener","IconButton","useStyles","makeStyles","card_media","display","width","card_action_area","textAlign","WeatherToday","cityData","container","justifyContent","name","gutterBottom","divider","marginTop","marginBottom","height","borderRadius","WeatherList","weathersData","Divider","alignItems","slice","filter","isSame","newWeathersData","i","dateCompare","add","firstWeatherofDayData","undefined","find","newWeatherData","push","transformWeathersData","dt","useFetch","initialUrl","setData","error","setError","isLoading","setIsLoading","url","setUrl","ok","Error","message","cod","fetchData","theme","backdrop","zIndex","drawer","snackbar","App","searchCityHandler","city","onCloseHandler","Box","Container","spacing","Snackbar","autoHideDuration","Slide","Alert","severity","AlertTitle","Backdrop","list","unstable_createMuiStrictModeTheme","overrides","MuiCssBaseline","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","ReactDOM","render","StrictMode","ThemeProvider","StylesProvider","injectFirst","CssBaseline","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c4dcc31a.chunk.js","sourcesContent":["import { CircularProgress, InputAdornment, TextField } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\n\r\nconst CityInput = ({\r\n  onSearch,\r\n  selectedCity,\r\n  setSelectedCity,\r\n  cityOptions,\r\n  setCityOptions,\r\n  isCityOptionsDisabled,\r\n  selectedCountry,\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const loading = open && cityOptions.length === 0;\r\n\r\n  const onOpenHandler = () => {\r\n    setOpen(true);\r\n  };\r\n  const onCloseHandler = () => {\r\n    setOpen(false);\r\n  };\r\n  const renderInputHandler = params => (\r\n    <TextField\r\n      {...params}\r\n      label=\"Search your city\"\r\n      placeholder=\"ex. Manila\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        ...params.InputProps,\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <LocationCityIcon />\r\n          </InputAdornment>\r\n        ),\r\n        endAdornment: (\r\n          <>\r\n            {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n            {params.InputProps.endAdornment}\r\n          </>\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n  const onChangeHandler = (event, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option':\r\n        setSelectedCity(value);\r\n        onSearch(value);\r\n        break;\r\n      case 'clear':\r\n        if (event.type === 'click') {\r\n          setSelectedCity(null);\r\n          onSearch(null);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      (async () => {\r\n        const response = await fetch(\r\n          'https://countriesnow.space/api/v0.1/countries/cities',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              country: selectedCountry,\r\n            }),\r\n          }\r\n        );\r\n\r\n        const results = await response.json();\r\n\r\n        setCityOptions(results.data);\r\n      })();\r\n    }\r\n  }, [loading, selectedCountry, setCityOptions]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      autoHighlight\r\n      open={open}\r\n      loading={loading}\r\n      options={cityOptions}\r\n      value={selectedCity}\r\n      disabled={isCityOptionsDisabled}\r\n      onOpen={onOpenHandler}\r\n      onClose={onCloseHandler}\r\n      renderInput={renderInputHandler}\r\n      onChange={onChangeHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CityInput;\r\n","import { CircularProgress, InputAdornment, TextField } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\n\r\nconst CountryInput = ({\r\n  onSearch,\r\n  setSelectedCountry,\r\n  setSelectedCity,\r\n  setCityOptions,\r\n  setIsCityOptionsDisabled,\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  const onOpenHandler = () => {\r\n    setOpen(true);\r\n  };\r\n  const onCloseHandler = () => {\r\n    setOpen(false);\r\n  };\r\n  const renderInputHandler = params => (\r\n    <TextField\r\n      {...params}\r\n      label=\"Search your country\"\r\n      placeholder=\"ex. Philippines\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        ...params.InputProps,\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <PublicIcon />\r\n          </InputAdornment>\r\n        ),\r\n        endAdornment: (\r\n          <>\r\n            {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n            {params.InputProps.endAdornment}\r\n          </>\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n  const onChangeHandler = (event, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option':\r\n        setIsCityOptionsDisabled(false);\r\n        setSelectedCountry(value);\r\n        break;\r\n      case 'clear':\r\n        if (event.type === 'click') {\r\n          setSelectedCity(null);\r\n          setIsCityOptionsDisabled(true);\r\n          setSelectedCountry(null);\r\n          setCityOptions([]);\r\n          onSearch(null);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      (async () => {\r\n        const response = await fetch(\r\n          'https://countriesnow.space/api/v0.1/countries'\r\n        );\r\n\r\n        const results = await response.json();\r\n\r\n        setOptions(results.data.map(data => data.country));\r\n      })();\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      autoHighlight\r\n      open={open}\r\n      loading={loading}\r\n      options={options}\r\n      onOpen={onOpenHandler}\r\n      onClose={onCloseHandler}\r\n      renderInput={renderInputHandler}\r\n      onChange={onChangeHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CountryInput;\r\n","export const titleCase = (str = '') => {\r\n  str = str.toLowerCase();\r\n  let words = str.split(' ');\r\n\r\n  let capitalized = words.map(function (word) {\r\n    return word.charAt(0).toUpperCase() + word.substring(1, word.length);\r\n  });\r\n  return capitalized.join(' ');\r\n};\r\n\r\nexport const handleImageError = (e, description = '') => {\r\n  let fallbackText = description.trim().replace(' ', '+');\r\n\r\n  e.target.onerror = null;\r\n  e.target.src = `https://dummyimage.com/100x100/cfcfcf/fff.jpg&text=${fallbackText}`;\r\n};\r\n","import { Card, Grid } from '@material-ui/core';\r\n\r\nimport classes from './CardUI.module.css';\r\n\r\nconst CardUI = props => {\r\n  return (\r\n    <Grid\r\n      item\r\n      component={Card}\r\n      className={classes.card}\r\n      xs={props.xs}\r\n      sm={props.sm}\r\n      md={props.md}\r\n    >\r\n      {props.children}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardUI;\r\n","import {\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  CardMedia,\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n  Zoom,\r\n} from '@material-ui/core';\r\nimport { handleImageError, titleCase } from '../utility/utility';\r\n\r\nimport CardUI from '../ui/CardUI';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport moment from 'moment';\r\n\r\nconst WeatherCard = props => {\r\n  const weatherData = { ...props.weatherData };\r\n  const date = moment(weatherData.dt_txt);\r\n\r\n  return (\r\n    <CardUI xs={6} sm={4} lg={3}>\r\n      <CardActionArea>\r\n        <CardHeader align=\"center\" title={date.format('dddd')}></CardHeader>\r\n        <CardMedia\r\n          component=\"img\"\r\n          image={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\r\n          title={titleCase(weatherData.weather[0].description)}\r\n          alt={weatherData.weather[0].description}\r\n          onError={e => handleImageError(e, weatherData.weather[0].description)}\r\n        ></CardMedia>\r\n        <CardContent>\r\n          <Typography variant=\"body2\" component=\"p\" align=\"center\">\r\n            {weatherData.main.temp}\r\n            &deg;\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions disableSpacing>\r\n        <Tooltip\r\n          title=\"Share\"\r\n          TransitionComponent={Zoom}\r\n          arrow\r\n          disableFocusListener\r\n        >\r\n          <IconButton aria-label=\"share\">\r\n            <ShareIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </CardActions>\r\n    </CardUI>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import {\r\n  CardActionArea,\r\n  CardContent,\r\n  CardHeader,\r\n  CardMedia,\r\n  Grid,\r\n  Typography,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\nimport { handleImageError, titleCase } from '../utility/utility';\r\n\r\nimport CardUI from '../ui/CardUI';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  card_media: {\r\n    display: 'initial',\r\n    width: '50%',\r\n  },\r\n  card_action_area: {\r\n    textAlign: 'center',\r\n  },\r\n}));\r\n\r\nconst WeatherToday = ({ weatherData, cityData }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <CardUI xs={10} sm={8} md={6} lg={4}>\r\n        <CardActionArea className={classes.card_action_area}>\r\n          <CardHeader\r\n            align=\"center\"\r\n            title={`${cityData.name}, ${cityData.country}`}\r\n          ></CardHeader>\r\n          <CardMedia\r\n            className={classes.card_media}\r\n            component=\"img\"\r\n            image={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\r\n            title={titleCase(weatherData.weather[0].description)}\r\n            alt={weatherData.weather[0].description}\r\n            onError={e =>\r\n              handleImageError(e, weatherData.weather[0].description)\r\n            }\r\n          ></CardMedia>\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\" align=\"center\">\r\n              {weatherData.main.temp}\r\n              &deg;\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\" align=\"center\">\r\n              {titleCase(weatherData.weather[0].description)}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </CardUI>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WeatherToday;\r\n","import { Divider, Grid, makeStyles } from '@material-ui/core';\r\n\r\nimport WeatherCard from './WeatherCard';\r\nimport WeatherCardDetails from './WeatherCardDetails';\r\nimport WeatherToday from './WeatherToday';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles({\r\n  divider: {\r\n    marginTop: '20px',\r\n    marginBottom: '20px',\r\n    height: '4px',\r\n    borderRadius: '5px',\r\n  },\r\n});\r\n\r\nconst WeatherList = props => {\r\n  const classes = useStyles();\r\n\r\n  const transformWeathersData = () => {\r\n    const weathersData = props.weathersData\r\n      .slice()\r\n      .filter(\r\n        weatherData => !moment(weatherData.dt_txt).isSame(moment(), 'day')\r\n      );\r\n    const newWeathersData = [];\r\n    for (let i = 0; i < weathersData.length; i++) {\r\n      const dateCompare = moment().add(newWeathersData.length + 1, 'days');\r\n\r\n      const firstWeatherofDayData = weathersData.filter(weatherData =>\r\n        moment(weatherData.dt_txt).isSame(dateCompare, 'day')\r\n      )[0];\r\n\r\n      if (\r\n        newWeathersData.find(newWeatherData =>\r\n          moment(newWeatherData.dt_txt).isSame(\r\n            moment(weathersData[i].dt_txt),\r\n            'day'\r\n          )\r\n        ) === undefined\r\n      ) {\r\n        newWeathersData.push(firstWeatherofDayData);\r\n      }\r\n    }\r\n\r\n    return newWeathersData;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <WeatherToday\r\n        weatherData={props.weathersData[0]}\r\n        cityData={props.cityData}\r\n      />\r\n      <Divider className={classes.divider} />\r\n      <Grid container alignItems=\"stretch\">\r\n        {transformWeathersData().map(weatherData => (\r\n          <WeatherCard key={weatherData.dt} weatherData={weatherData} />\r\n        ))}\r\n      </Grid>\r\n      {/* <Divider className={classes.divider} />\r\n      <WeatherCardDetails weatherData={props.weathersData[0]} /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useFetch = initialUrl => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setIsLoading(true);\r\n\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await fetch(url);\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n            throw new Error(data.message);\r\n          }\r\n\r\n          setIsLoading(false);\r\n\r\n          if (data.cod >= 400) {\r\n            setError(data.message);\r\n            return;\r\n          }\r\n\r\n          setData(data);\r\n        } catch (error) {\r\n          setIsLoading(false);\r\n          setError(error.message);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [url]);\r\n\r\n  return { data, error, isLoading, setUrl, setData, setError };\r\n};\r\n\r\nexport default useFetch;\r\n","import { API_BASE_URL, API_KEY } from './api/config';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport {\n  Backdrop,\n  Box,\n  CircularProgress,\n  Container,\n  Grid,\n  Slide,\n  Snackbar,\n  Typography,\n  makeStyles,\n} from '@material-ui/core';\n\nimport CityInput from './components/CityInput';\nimport CountryInput from './components/CountryInput';\nimport WeatherList from './components/WeatherList';\nimport useFetch from './hooks/useFetch';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  snackbar: {\n    textAlign: 'initial',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [cityOptions, setCityOptions] = useState([]);\n  const [isCityOptionsDisabled, setIsCityOptionsDisabled] = useState(true);\n\n  const { data, error, isLoading, setUrl, setData, setError } = useFetch();\n\n  const searchCityHandler = city => {\n    if (city) {\n      setUrl(\n        `${API_BASE_URL}/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n      );\n    } else {\n      setUrl(null);\n      setData(null);\n      setError(null);\n    }\n  };\n  const onCloseHandler = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setError(null);\n  };\n\n  const getContent = () => {\n    if (error) {\n      return (\n        <Snackbar\n          className={classes.snackbar}\n          open\n          autoHideDuration={10000}\n          TransitionComponent={Slide}\n          onClose={onCloseHandler}\n        >\n          <Alert severity=\"error\" onClose={onCloseHandler}>\n            <AlertTitle>Error</AlertTitle>\n            {error}\n          </Alert>\n        </Snackbar>\n      );\n    }\n\n    if (!data && isLoading) {\n      return (\n        <Backdrop className={classes.backdrop} open>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      );\n    }\n\n    if (!data) {\n      return null;\n    }\n\n    return <WeatherList weathersData={data.list} cityData={data.city} />;\n  };\n\n  return (\n    <Box marginTop={2} marginBottom={2}>\n      <Container className=\"App\">\n        <Typography variant=\"h4\" component=\"h2\" align=\"center\">\n          Check Your Weather\n        </Typography>\n\n        <Box marginTop={2} marginBottom={2}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6} md={6}>\n              <CountryInput\n                onSearch={searchCityHandler}\n                setSelectedCountry={setSelectedCountry}\n                setSelectedCity={setSelectedCity}\n                setCityOptions={setCityOptions}\n                setIsCityOptionsDisabled={setIsCityOptionsDisabled}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={6}>\n              <CityInput\n                onSearch={searchCityHandler}\n                selectedCity={selectedCity}\n                setSelectedCity={setSelectedCity}\n                cityOptions={cityOptions}\n                setCityOptions={setCityOptions}\n                isCityOptionsDisabled={isCityOptionsDisabled}\n                selectedCountry={selectedCountry}\n              />\n            </Grid>\n          </Grid>\n        </Box>\n\n        {getContent()}\n      </Container>\n    </Box>\n  );\n};\n\nexport default App;\n","export const API_KEY = '34f38061357d6592fb59314ceb889161';\r\nexport const API_BASE_URL = 'https://api.openweathermap.org/';\r\n","import {\n  StylesProvider,\n  ThemeProvider,\n  unstable_createMuiStrictModeTheme,\n} from '@material-ui/core/styles';\n\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst theme = unstable_createMuiStrictModeTheme({\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        body: {\n          backgroundImage: 'url(assets/weather-bg.jpg)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          backgroundAttachment: 'fixed',\n        },\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <StylesProvider injectFirst>\n        <CssBaseline />\n        <App />\n      </StylesProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardUI_card__2d1md\"};"],"sourceRoot":""}