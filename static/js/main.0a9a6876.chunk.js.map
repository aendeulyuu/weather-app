{"version":3,"sources":["components/CitySelector.js","components/WeatherCard.js","components/WeatherList.js","hooks/useFetch.js","App.js","api/config.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","CitySelector","props","classes","useState","city","setCity","isDisabled","setIsDisabled","error","setError","Grid","container","item","xs","Typography","variant","component","TextField","label","placeholder","color","value","onChange","event","target","length","onKeyDown","keyCode","onSearch","disabled","helperText","InputProps","startAdornment","InputAdornment","position","autoFocus","className","Button","startIcon","onClick","card","background","WeatherCard","weatherData","date","moment","dt_txt","Card","CardMedia","image","weather","icon","title","description","CardContent","gutterBottom","main","format","temp_max","WeatherList","weathersData","slice","newWeathersData","increment","dateCompare","add","firstWeatherofDayData","filter","isSame","push","console","log","transformWeathersData","map","sm","md","lg","dt","useFetch","initialUrl","data","setData","isLoading","setIsLoading","url","setUrl","useEffect","a","fetch","response","json","ok","Error","message","cod","fetchData","backdrop","zIndex","drawer","snackbar","textAlign","App","handleClose","reason","Container","Snackbar","open","autoHideDuration","TransitionComponent","Slide","onClose","Alert","severity","AlertTitle","Backdrop","CircularProgress","list","unstable_createMuiStrictModeTheme","overrides","MuiCssBaseline","body","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"iXAcMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SAwGbC,EAnGM,SAAAC,GACnB,IAAMC,EAAUR,IAEhB,EAAwBS,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAsCA,OACE,mCACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,EAAzB,UACE,cAACW,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,gCAKF,cAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACI,EAAA,EAAD,CACEC,MAAOV,EAAQ,QAAU,OACzBW,YAAY,cACZC,MAAM,UACNC,MAAOjB,EACPkB,SAnDgB,SAAAC,GACU,IAA9BA,EAAMC,OAAOH,MAAMI,QACrBhB,EAAS,MAGXJ,EAAQkB,EAAMC,OAAOH,QA+CbK,UA5CY,SAAAH,GACpB,GAAsB,KAAlBA,EAAMI,QAAgB,CACxB,GAAoB,IAAhBvB,EAAKqB,OAEP,YADAhB,EAAS,wBAIXF,GAAc,GACdN,EAAM2B,SAASxB,KAqCTyB,SAAUvB,EACVE,MAAiB,OAAVA,EACPsB,WAAYtB,EACZuB,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,SACE,cAAC,IAAD,OAINC,WAAS,MAIb,eAACzB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIuB,UAAWlC,EAAQL,KAAtC,UACE,cAACwC,EAAA,EAAD,CACEtB,QAAQ,YACRK,MAAM,UACNkB,UAAW,cAAC,IAAD,IACXC,QApDY,WACA,IAAhBnC,EAAKqB,QAKTlB,GAAc,GACdN,EAAM2B,SAASxB,IALbK,EAAS,yBAmDHoB,SAAUvB,EALZ,2BASA,cAAC+B,EAAA,EAAD,CACEtB,QAAQ,YACRK,MAAM,UACNkB,UAAW,cAAC,IAAD,IACXC,QAnDW,WACnBlC,EAAQ,IACRE,GAAc,GACdN,EAAM2B,SAAS,OAiDPC,UAAWvB,EALb,4B,4CChGJZ,EAAYC,aAAW,iBAAO,CAClC6C,KAAM,CACJC,WAAY,+BAmCDC,EA/BK,SAAAzC,GAClB,IAAMC,EAAUR,IAEViD,EAAc1C,EAAM0C,YACpBC,EAAOC,IAAOF,EAAYG,QAEhC,OACE,eAACC,EAAA,EAAD,CAAMX,UAAWlC,EAAQsC,KAAzB,UACE,cAACQ,EAAA,EAAD,CACEhC,UAAU,MACViC,MAAK,2CAAsCN,EAAYO,QAAQ,GAAGC,KAA7D,WACLC,MAAOT,EAAYO,QAAQ,GAAGG,cAEhC,eAACC,EAAA,EAAD,WACE,cAACxC,EAAA,EAAD,CAAYyC,cAAY,EAACxC,QAAQ,KAAKC,UAAU,KAAhD,SACG2B,EAAYO,QAAQ,GAAGM,OAE1B,eAAC1C,EAAA,EAAD,CAAYC,QAAQ,QAAQK,MAAM,gBAAgBJ,UAAU,IAA5D,UACG4B,EAAKa,OAAO,eADf,MACkCb,EAAKa,OAAO,aAE9C,eAAC3C,EAAA,EAAD,CAAYC,QAAQ,QAAQK,MAAM,gBAAgBJ,UAAU,IAA5D,kBACQ2B,EAAYa,KAAKE,YAEzB,eAAC5C,EAAA,EAAD,CAAYC,QAAQ,QAAQK,MAAM,gBAAgBJ,UAAU,IAA5D,kBACQ2B,EAAYa,KAAKE,mBCOlBC,EA3CK,SAAA1D,GA6BlB,OA5B8B,WAG5B,IAFA,IAAM2D,EAAe3D,EAAM2D,aAAaC,QAClCC,EAAkB,GAFU,WAGzBC,GAIP,IAAMC,EAA4B,IAAdD,EAAkBlB,MAAWA,MAASoB,IAAI,EAAG,QAC3DC,EAAwBN,EAAaO,QAAO,SAAAxB,GAAW,OAC3DE,IAAOF,EAAYG,QAAQsB,OAAOJ,EAAa,UAC/C,GACFF,EAAgBO,KAAKH,IARdH,EAAY,EAAGA,EAAYH,EAAanC,OAAQsC,IAAc,EAA9DA,GAWTO,QAAQC,IAAIT,GAYdU,GAGE,qCACE,cAAC9D,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,IACzB,cAACW,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,EAAzB,SACGE,EAAM2D,aAAaa,KAAI,SAAA9B,GAAW,OACjC,cAACjC,EAAA,EAAD,CAAME,MAAI,EAAsBC,GAAI,GAAI6D,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA1D,SACE,cAAC,EAAD,CAAajC,YAAaA,KADZA,EAAYkC,a,yBCKvBC,EAzCE,SAAAC,GACf,MAAwB5E,mBAAS,MAAjC,mBAAO6E,EAAP,KAAaC,EAAb,KACA,EAA0B9E,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,mBAAS,MAA3C,mBAAO+E,EAAP,KAAkBC,EAAlB,KACA,EAAsBhF,mBAAS4E,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAkCA,OAhCAC,qBAAU,WACJF,IACFD,GAAa,GAEE,uCAAG,8BAAAI,EAAA,+EAESC,MAAMJ,GAFf,cAERK,EAFQ,gBAIKA,EAASC,OAJd,UAIRV,EAJQ,OAMTS,EAASE,GANA,sBAON,IAAIC,MAAMZ,EAAKa,SAPT,UAUdV,GAAa,KAETH,EAAKc,KAAO,KAZF,wBAaZrF,EAASuE,EAAKa,SAbF,2BAiBdZ,EAAQD,GAjBM,kDAmBdG,GAAa,GACb1E,EAAS,KAAMoF,SApBD,0DAAH,oDAwBfE,MAED,CAACX,IAEG,CAAEJ,OAAMxE,QAAO0E,YAAWG,SAAQJ,UAASxE,aCvB9Cf,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCoG,SAAU,CACRC,OAAQrG,EAAMqG,OAAOC,OAAS,EAC9B9E,MAAO,QAET+E,SAAU,CACRC,UAAW,eAuEAC,EAnEH,WACV,IAAMnG,EAAUR,IAEhB,EAA8DoF,IAAtDE,EAAR,EAAQA,KAAMxE,EAAd,EAAcA,MAAO0E,EAArB,EAAqBA,UAAWG,EAAhC,EAAgCA,OAAQJ,EAAxC,EAAwCA,QAASxE,EAAjD,EAAiDA,SAc3C6F,EAAc,SAAC/E,EAAOgF,GACX,cAAXA,GAIJ9F,EAAS,OAoCX,OACE,eAAC+F,EAAA,EAAD,CAAWpE,UAAU,MAArB,UACE,cAAC,EAAD,CAAcR,SAvDQ,SAAAxB,GACpBA,EACFiF,EAAO,GAAD,OCjCgB,kCDiChB,gCACmCjF,EADnC,kBClCW,mCDkCX,mBAINiF,EAAO,MACPJ,EAAQ,MACRxE,EAAS,UAaPD,EAEA,cAACiG,EAAA,EAAD,CACErE,UAAWlC,EAAQiG,SACnBO,MAAI,EACJC,iBAAkB,IAClBC,oBAAqBC,IACrBC,QAASR,EALX,SAOE,eAACS,EAAA,EAAD,CAAOC,SAAS,QAAQF,QAASR,EAAjC,UACE,cAACW,EAAA,EAAD,oBACCzG,QAMJwE,GAAQE,EAET,cAACgC,EAAA,EAAD,CAAU9E,UAAWlC,EAAQ8F,SAAUU,MAAI,EAA3C,SACE,cAACS,EAAA,EAAD,CAAkB/F,MAAM,cAKzB4D,EAIE,cAAC,EAAD,CAAapB,aAAcoB,EAAKoC,OAH9B,S,0BErEPxH,EAAQyH,YAAkC,CAC9CC,UAAW,CACTC,eAAgB,CACd,UAAW,CACTC,KAAM,CACJC,gBAAiB,6BACjBC,eAAgB,QAChBC,mBAAoB,SACpBC,iBAAkB,YAClBC,qBAAsB,cAOhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAACC,EAAA,EAAD,CAAerI,MAAOA,EAAtB,UACE,cAACsI,EAAA,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.0a9a6876.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Grid,\r\n  InputAdornment,\r\n  TextField,\r\n  Typography,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useState } from 'react';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst CitySelector = props => {\r\n  const classes = useStyles();\r\n\r\n  const [city, setCity] = useState('');\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const cityChangeHandler = event => {\r\n    if (event.target.value.length !== 0) {\r\n      setError(null);\r\n    }\r\n\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const cityOnKeyDown = event => {\r\n    if (event.keyCode === 13) {\r\n      if (city.length === 0) {\r\n        setError('Please enter a city.');\r\n        return;\r\n      }\r\n\r\n      setIsDisabled(true);\r\n      props.onSearch(city);\r\n    }\r\n  };\r\n\r\n  const searchHandler = () => {\r\n    if (city.length === 0) {\r\n      setError('Please enter a city.');\r\n      return;\r\n    }\r\n\r\n    setIsDisabled(true);\r\n    props.onSearch(city);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    setCity('');\r\n    setIsDisabled(false);\r\n    props.onSearch(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h3\" component=\"h1\">\r\n            Search Your City\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            label={error ? 'Error' : 'City'}\r\n            placeholder=\"e.g. Manila\"\r\n            color=\"primary\"\r\n            value={city}\r\n            onChange={cityChangeHandler}\r\n            onKeyDown={cityOnKeyDown}\r\n            disabled={isDisabled}\r\n            error={error !== null}\r\n            helperText={error}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <LocationCityIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            autoFocus\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.root}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SearchIcon />}\r\n            onClick={searchHandler}\r\n            disabled={isDisabled}\r\n          >\r\n            Check Weather\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={resetHandler}\r\n            disabled={!isDisabled}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CitySelector;\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Typography,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  card: {\r\n    background: 'rgba(255, 255, 255, .3)',\r\n  },\r\n}));\r\n\r\nconst WeatherCard = props => {\r\n  const classes = useStyles();\r\n\r\n  const weatherData = props.weatherData;\r\n  const date = moment(weatherData.dt_txt);\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardMedia\r\n        component=\"img\"\r\n        image={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\r\n        title={weatherData.weather[0].description}\r\n      ></CardMedia>\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          {weatherData.weather[0].main}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {date.format('MMM D, YYYY')} - {date.format('h:mm A')}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          Min: {weatherData.main.temp_max}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          Max: {weatherData.main.temp_max}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import { Grid } from '@material-ui/core';\r\nimport WeatherCard from './WeatherCard';\r\nimport moment from 'moment';\r\n\r\nconst WeatherList = props => {\r\n  const transformWeathersData = () => {\r\n    const weathersData = props.weathersData.slice();\r\n    const newWeathersData = [];\r\n    for (let increment = 0; increment < weathersData.length; increment++) {\r\n      if (increment) {\r\n      }\r\n\r\n      const dateCompare = increment === 0 ? moment() : moment().add(1, 'days');\r\n      const firstWeatherofDayData = weathersData.filter(weatherData =>\r\n        moment(weatherData.dt_txt).isSame(dateCompare, 'day')\r\n      )[0];\r\n      newWeathersData.push(firstWeatherofDayData);\r\n    }\r\n\r\n    console.log(newWeathersData);\r\n  };\r\n\r\n  // const transformedWeathersData = props.weathersData.filter(weatherData => {\r\n  //   const increment = 0;\r\n\r\n  //   if (weatherData) {\r\n  //     increment++;\r\n  //     return weatherData;\r\n  //   }\r\n  // });\r\n\r\n  transformWeathersData();\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}></Grid>\r\n      <Grid container spacing={3}>\r\n        {props.weathersData.map(weatherData => (\r\n          <Grid item key={weatherData.dt} xs={12} sm={9} md={6} lg={3}>\r\n            <WeatherCard weatherData={weatherData} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useFetch = initialUrl => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setIsLoading(true);\r\n\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await fetch(url);\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n            throw new Error(data.message);\r\n          }\r\n\r\n          setIsLoading(false);\r\n\r\n          if (data.cod >= 400) {\r\n            setError(data.message);\r\n            return;\r\n          }\r\n\r\n          setData(data);\r\n        } catch (error) {\r\n          setIsLoading(false);\r\n          setError(error.message);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [url]);\r\n\r\n  return { data, error, isLoading, setUrl, setData, setError };\r\n};\r\n\r\nexport default useFetch;\r\n","import './App.css';\n\nimport { API_BASE_URL, API_KEY } from './api/config';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport {\n  Backdrop,\n  CircularProgress,\n  Container,\n  Slide,\n  Snackbar,\n  makeStyles,\n} from '@material-ui/core';\n\nimport CitySelector from './components/CitySelector';\nimport WeatherList from './components/WeatherList';\nimport useFetch from './hooks/useFetch';\n\nconst useStyles = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n  snackbar: {\n    textAlign: 'initial',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  const { data, error, isLoading, setUrl, setData, setError } = useFetch();\n\n  const searchCityHandler = city => {\n    if (city) {\n      setUrl(\n        `${API_BASE_URL}/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n      );\n    } else {\n      setUrl(null);\n      setData(null);\n      setError(null);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setError(null);\n  };\n\n  const getContent = () => {\n    if (error) {\n      return (\n        <Snackbar\n          className={classes.snackbar}\n          open\n          autoHideDuration={10000}\n          TransitionComponent={Slide}\n          onClose={handleClose}\n        >\n          <Alert severity=\"error\" onClose={handleClose}>\n            <AlertTitle>Error</AlertTitle>\n            {error}\n          </Alert>\n        </Snackbar>\n      );\n    }\n\n    if (!data && isLoading) {\n      return (\n        <Backdrop className={classes.backdrop} open>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      );\n    }\n\n    if (!data) {\n      return null;\n    }\n\n    return <WeatherList weathersData={data.list} />;\n  };\n\n  return (\n    <Container className=\"App\">\n      <CitySelector onSearch={searchCityHandler} />\n\n      {getContent()}\n    </Container>\n  );\n};\n\nexport default App;\n","export const API_KEY = '34f38061357d6592fb59314ceb889161';\r\nexport const API_BASE_URL = 'https://api.openweathermap.org/';\r\n","import {\n  ThemeProvider,\n  unstable_createMuiStrictModeTheme,\n} from '@material-ui/core/styles';\n\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst theme = unstable_createMuiStrictModeTheme({\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        body: {\n          backgroundImage: 'url(assets/weather-bg.jpg)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          backgroundAttachment: 'fixed',\n        },\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}